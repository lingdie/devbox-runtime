name: Build All Runtimes

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the Docker image'
        required: true
        default: 'latest'
      cn_patch_enabled:
        description: 'Enable CN patch modifications'
        required: false
        default: 'false'
        type: boolean
      aliyun_enabled:
        description: 'Enable Aliyun ACR builds'
        required: false
        default: 'false'
        type: boolean

jobs:
  # Step 1: Build OS Runtimes
  build-os-runtimes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: Trigger OS Runtimes Build
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-os-runtimes.yml',
              ref: context.ref,
              inputs: {
                tag: '${{ inputs.tag }}',
                cn_patch_enabled: '${{ inputs.cn_patch_enabled }}',
                aliyun_enabled: '${{ inputs.aliyun_enabled }}',
                auto_trigger_language_runtimes: 'false'
              }
            });
            console.log('OS runtimes build triggered:', data);
      - name: Wait for OS Runtimes to complete
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'Build OS Runtimes'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30

  # Step 2: Build Language Runtimes
  build-language-runtimes:
    runs-on: ubuntu-latest
    needs: build-os-runtimes
    permissions:
      contents: read
      actions: write
    steps:
      - name: Trigger Language Runtimes Build
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-language-runtimes.yml',
              ref: context.ref,
              inputs: {
                tag: '${{ inputs.tag }}',
                cn_patch_enabled: '${{ inputs.cn_patch_enabled }}',
                aliyun_enabled: '${{ inputs.aliyun_enabled }}'
              }
            });
            console.log('Language runtimes build triggered:', data);
      - name: Wait for Language Runtimes to complete
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'Build Language Runtimes'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30

  # Step 3: Build Framework Runtimes
  build-framework-runtimes:
    runs-on: ubuntu-latest
    needs: build-language-runtimes
    permissions:
      contents: read
      actions: write
    steps:
      - name: Trigger Framework Runtimes Build
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-framework-runtimes.yml',
              ref: context.ref,
              inputs: {
                tag: '${{ inputs.tag }}',
                build_base_image_tag: '${{ inputs.tag }}',
                build_base_image_tag_with_cn_patch: '${{ inputs.tag }}-cn',
                cn_patch_enabled: '${{ inputs.cn_patch_enabled }}',
                aliyun_enabled: '${{ inputs.aliyun_enabled }}'
              }
            });
            console.log('Framework runtimes build triggered:', data);
      - name: Wait for Framework Runtimes to complete
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'Build Framework Runtimes'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30

  # Final step: Summary
  build-summary:
    runs-on: ubuntu-latest
    needs: [build-os-runtimes, build-language-runtimes, build-framework-runtimes]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| OS Runtimes | ${{ needs.build-os-runtimes.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Language Runtimes | ${{ needs.build-language-runtimes.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Framework Runtimes | ${{ needs.build-framework-runtimes.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-os-runtimes.result }}" == "success" && "${{ needs.build-language-runtimes.result }}" == "success" && "${{ needs.build-framework-runtimes.result }}" == "success" ]]; then
            echo "✅ All runtimes built successfully!"
          else
            echo "❌ Some runtimes failed to build"
            exit 1
          fi
